@using System.Globalization
<!-- device list -->
<div id="device-list" class="card shadow">
    <div class="content">
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <div class="title">List of Devices</div>
                <div class="ingress text-sub">@_devices.Count().ToString() devices total</div>
            </div>
            <button class="btn btn-purple">New Device</button>
        </div>

        <div class="devices mt-4">
            @if (_devices.Count() > 0)
            {
                <table class="table mt-4">
                    <thead>
                    <tr>
                        <th scope="col">
                            <i class="fas fa-microchip"></i>
                        </th>
                        <th scope="col">DeviceId</th>
                        <th scope="col">Location</th>
                        <th scope="col">Date</th>
                        <th scope="col">Type</th>
                        <th scope="col">Status</th>
                        <th scope="col"></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var device in _devices)
                    {
                        <!-- device item -->
                        <tr>
                            <td>
                                <i class="fas fa-microchip"></i>
                            </td>
                            <td>@device.DeviceId</td>
                            <td>
                                <div>@device.Location.City</div>
                                <div class="ingress">@device.Location.Country</div>
                            </td>
                            <td>
                                <div>@device.LastUpdateString</div>
                                <div class="ingress">Last Updated</div>
                            </td>
                            <td>
                                <div>@device.Type.Sensor</div>
                                <div class="ingress">@device.Type.Description</div>
                            </td>
                            <td>
                                @if (device.Status == DeviceStatus.Online)
                                {
                                    <div class="status-online">@device.Status</div>
                                }
                                else if (device.Status == DeviceStatus.Offline)
                                {
                                    <div class="status-offline">@device.Status</div>
                                }
                                else
                                {
                                    <div class="status-unknown">@device.Status</div>
                                }
                            </td>
                            <td>
                                <div class="d-flex justify-content-between align-items-center">
                                    <i class="fas fa-comment-alt-lines me-2"></i>
                                    <i class="fas fa-edit me-2"></i>
                                    <i class="fas fa-trash"></i>
                                </div>
                            </td>
                        </tr>
                    }

                    </tbody>
                </table>
            }
            else
            {
                <div class="d-flex justify-content-center align-items-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
        </div>

    </div>
</div>

@code {
    private IEnumerable<Device> _devices;

    protected override async Task OnInitializedAsync()
    {
        _devices = new List<Device>();
        _devices = await client.GetFromJsonAsync<IEnumerable<Device>>("https://azdev1.azurewebsites.net/api/mock/devices");
    }

}
